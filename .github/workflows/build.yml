# Este workflow automatiza o processo de build do plugin.
# - Em cada push para a branch 'main', ele compila um .jar de desenvolvimento.
# - Ao criar uma tag (ex: v1.0.4), ele compila e cria um Release oficial no GitHub.
name: Java CI with Maven

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

jobs:
  build-and-release:
    # Usa a versão mais recente do Ubuntu para executar o job
    runs-on: ubuntu-latest
    # Concede permissões para a action criar um release
    permissions:
      contents: write

    steps:
      # Passo 1: Faz o checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # Passo 2: Configura o JDK 17 (Temurin), conforme especificado na sua documentação
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven' # Adiciona cache para as dependências do Maven, acelerando os builds

      # Passo de Validação: Verifica a sintaxe de todos os arquivos .yml em 'resources'
      - name: Validate YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: src/main/resources/
          config_data: |
            extends: default
            rules:
              line-length: disable
              document-start: disable

      # Passo 3: Compila o projeto com Maven, criando o arquivo .jar.
      # Os testes são pulados (-DskipTests) pois testes de plugins Bukkit requerem um ambiente
      # de servidor mockado, que não está configurado neste workflow. A versão é lida diretamente do pom.xml.
      - name: Build with Maven
        run: mvn clean package -Dmaven.compiler.showWarnings=false -DskipTests --file pom.xml

      # Passo 4: Se o gatilho foi uma tag, cria um Release no GitHub
      - name: Create Release and Upload Artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # Usa um wildcard para encontrar o .jar, evitando erros quando a versão muda
          files: target/*.jar

      # Passo 5: Se o gatilho foi um push na 'main', anexa o .jar como um artefato do build
      - name: Upload Development Artifact
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: MCtrilhas-dev
          path: target/MCtrilhas.jar
